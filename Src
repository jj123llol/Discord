'''

to get started install discord.py-self

if you use any code from here, credit me!!
iused discord.py docs!

'''


import discord, os, time, asyncio, random, requests

print("---[[[[  loading, wait until done. ]]]]---\n\n\n")
if not os.path.exists("token.txt"):
    token = input("token: ")
    with open("token.txt", "w") as f:
        f.write(token)
    
with open("token.txt", "r") as f:
    token = f.read()

global prefix, others_allowed, adk, afk_msg, loaded, watching, whitelisted, spam_ping, cmdlists, bot_runner
prefix, others_allowed = ".", True
afk, afk_msg = False, ""
loaded, spam_ping = False, False
watching = []
whitelisted = []
bot_runner = ""

cmds = {}
cmdlists = {}

async def getImg(url):
    img_data = requests.get(url).content
    with open('temp.png', 'wb') as file:
        file.write(img_data)
    return discord.File("temp.png")

async def tick():
    unix = time.time()
    unix = str(unix)
    unix = unix.split(".")[0]
    return int(unix)

class cmdlist:
    async def update(self):
        temp_list = list(cmds.keys())[self.minn:self.maxx]
        self.comds = "\n".join(temp_list)
        await self.message.edit(self.comds + "\n\n react ‚ñ∂Ô∏è or ‚óÄÔ∏è or ‚ùå")
    async def start(self, channel):
        global cmdlists
        self.message = await channel.send("loading..")
        self.minn = 0
        self.maxx = 5
        await self.update()
        cmdlists[self.message] = self
        return self.message
    async def next(self):
        self.minn = self.minn + 5
        self.maxx = self.maxx + 5
        if self.minn > len(cmds):
            self.minn = 0
            self.maxx = 5
        await self.update()
        
    async def back(self):
        self.minn = self.minn - 5
        self.maxx = self.maxx - 5
        if self.minn < 0:
            self.minn = 0
            self.maxx = 5
        await self.update()
        
    async def delete(self):
        await self.message.delete()
        del cmdlists[self.message]

def addcmd(name, level):
    def decorator(func):
        cmds[name] = {
            "func": func,
            "level": level
        }
        return func
    return decorator
    
async def waitForReaction(emote, target):
    def check(reaction, user):
        return user.id == target.id and str(reaction.emoji) == emote

    try:
        reaction, user = await client.wait_for('reaction_add', timeout=30.0, check=check)
    except asyncio.TimeoutError:
        return False
    else:
        return True
            
            
@addcmd("ping", 1)
async def ping(msg, message, self):
    await message.reply(f"hello, <@{message.author.id}>. pong!")

@addcmd("insult", 1)
async def insult(msg, message, self):
    for mention in message.mentions:
        insults = ["smells bad", "looks bad", "is a horrible friend"]
        await message.channel.send(f"<@{mention.id}> " + insults[random.randint(0, len(insults)-1)])
    
        
@addcmd("compliment", 1)
async def compliment(msg, message, self):
    for mention in message.mentions:
        comps = ["looks good", "smells good", "is a good friend", "is pretty"]
        await message.channel.send(f"<@{mention.id}> " + comps[random.randint(0, len(comps)-1)])
    
        
@addcmd("afk", 2)
async def afk(msg, message, self):
    global afk, afk_msg
    unix = str(await tick())
    msg = " ".join(msg)
    msg = msg + f"\nafking since: <t:{unix}:R>"
    afk, afk_msg = True, msg
    await message.edit(f"afking for {afk_msg}")
    time.sleep(2)
    await message.delete()

@addcmd("unafk", 2)
async def unafk(msg, message, self):
    global afk, afk_msg
    afk, afk_msg = False, ""
    await message.edit("afk off")
    time.sleep(2)
    await message.delete()

@addcmd("disclaimer", 1)        
async def disclaimer(msg, message, seld):
    await message.reply("this is not a selfbot, im manually replying")

@addcmd("setprefix", 2)  
async def setprefix(msg, message, self):
    global prefix
    prefix = msg[0]
    await message.edit(f"prefix changed to `{prefix}`")

    
@addcmd("ghostping", 1)            
async def ghostping(msg, message, self):
    mentions = message.mentions
    try:
        await message.delete()
    except:
        await message.reply("cant delete msg")
    for mention in mentions:
        sent = await message.channel.send(f"<@{mention.id}> ping!")
        time.sleep(1)
        await sent.delete()
       

@addcmd("sex", 1)              
async def sex(msg, message, self):
    for mention in message.mentions:
        new_msg = await message.channel.send(f"<@{mention.id}>, do you wanna have sex with <@{message.author.id}>? react with üëç if yes. no reaction within 30 seconds means no.")
        consent = await waitForReaction('üëç', mention)
        if consent == False:
            await new_msg.reply(f'rizz-quirements not met, <@{message.author.id}> has no rizz!')
        else:
            await new_msg.reply(f' <@{message.author.id}> sucessfully fucked <@{mention.id}>!')

@addcmd("blow", 1)              
async def vloe(msg, message, self):
    for mention in message.mentions:
        new_msg = await message.channel.send(f"<@{mention.id}>, do you wanna be blown by <@{message.author.id}>? react with üëç if yes. no reaction within 30 seconds means no.")
        consent = await waitForReaction('üëç', mention)
        if consent == False:
            await message.reply(f'rizz-quirements not met, <@{message.author.id}> has no rizz!')
            await new_msg.delete()
        else:
            await new_msg.edit("processing..")
            picture = await getImg("https://raw.githubusercontent.com/jj123llol/Discord/refs/heads/main/Screenshot_20250724-001001-813.png")
            await message.reply(f' <@{message.author.id}> sucessfully sucked off <@{mention.id}>!', file=picture)
            os.remove("temp.png")
            await new_msg.delete()


@addcmd("kill", 1)
async def kill(msg, message, self):
    for mention in message.mentions:
        if mention.id == message.author.id:
            await message.channel.send(f"<@{mention.id}> but why?")
            continue
        new_msg = await message.channel.send(f"<@{mention.id}>, was killed by <@{message.author.id}>! :gun:")


@addcmd("timestamp", 1)
async def timestamp(msg, message, self):
    unix = time.time()
    unix = str(unix)
    unix = unix.split(".")[0]
    await message.reply(f"<t:{unix}:R>")
    
@addcmd("watch", 2)

async def watch(msg, message, self):
    global watching
    channel = message.channel
    await message.edit("watching channel..:eyes:")
    time.sleep(2)
    await message.delete()
    watching.append(channel)

@addcmd("unwatch", 2)
async def unwatch(msg, message, self):
    global watching
    watching.remove(message.channel)
    await message.edit("no longer watching!")
    time.sleep(2)
    await message.delete()
    
@addcmd("lock", 2)
async def lock(msg, message, self):
    global others_allowed
    others_allowed = False
    await message.edit("locked! :lock: ")
    time.sleep(2)
    await message.delete()

@addcmd("unlock", 2)
async def unlock(msg, message, self):
    global others_allowed
    others_allowed = True
    await message.edit("unlocked! :unlock:")
    time.sleep(2)
    await message.delete()
    

@addcmd("kiss", 1)
async def kiss(msg, message, self):
    for mention in message.mentions:
        await message.reply(f"<@{message.author.id}> kisses <@{mention.id}>! :kiss:")
        
@addcmd("hug", 1)
async def hug(msg, message, self):
    for mention in message.mentions:
        await message.reply(f"<@{message.author.id}> hugs <@{mention.id}>! :people_hugging: ")



@addcmd("ppsize", 1)
async def ppsize(msg, message, self):
    for mention in message.mentions:
        if mention.id == 1195825285866717215:
            size = "infinite"
        else:
            size = str(random.randint(0, 30))
            
        await message.reply(f"<@{mention.id}> has a pp size of " + size + " inches !")
         
         
@addcmd("gaymeter", 1)
async def gaymeter(msg, message, self):
    for mention in message.mentions:
        if mention.id == 1195825285866717215:
            gay = "0"
        else:
            gay = str(random.randint(0, 100))
            
        await message.reply(f"<@{mention.id}> is " + gay + "% gay!")
        

@addcmd("punch", 1)
async def punch(msg, message, self):
    for mention in message.mentions:
        await message.reply(f"<@{message.author.id}> punched <@{mention.id}>! :punch:")
        
@addcmd("cmds", 1)
async def cmdz(msg, message, self):
   cmdlistt = cmdlist()
   msg = await cmdlistt.start(message.channel)
   
   

@addcmd("whitelist", 2)
async def whitelist(msg, message, self):
    global whitelisted
    whitelisted.append(message.channel)
    await message.edit("whitelisted!")
    
@addcmd("unwhitelist", 2)
async def unwhitelist(msg, message, self):
    global whitelisted
    whitelisted.remove(message.channel)
    await message.edit("unwhitelisted")
    
@addcmd("spamping", 2)
async def spamping(msg, message, self):
    global spam_ping
    spam_ping = True
    if len(message.mentions) < 1:
        await message.edit("ping someone")
        time.sleep(2)
        await message.delete()
        return ""
    ping = message.mentions[0].id
    channel = message.channel
    await message.delete()
    while spam_ping == True:
        time.sleep(random.randint(1, 10))
        await channel.send(f"<@{ping}>")
        
@addcmd("unspamping", 2)
async def unspamping(msg, message, self):
    global spam_ping
    spam_ping = False
    await message.edit("turned off!")
    time.sleep(2)
    await message.delete()
    
@addcmd("gamble", 1)
async def gamble(msg, message, self):
    num = random.randint(1, 2)
    if num == 1:
        await message.reply("winner!")
    else:
        await message.reply("fucking loser get good")
        
@addcmd("pie", 1)
async def pie(msg, message, self):
    num = random.randint(1, 2)
    if num == 1:
        await message.reply("eat up :pie:")
    else:
        await message.reply("oven exoloded:boom:")
        
@addcmd("8ball", 1)
async def ball(msg, message, self):
    choices = [
    "likey", "outlook bad", "maybe", "yes", "no", "idfk man im js a ball"
    ]
    num = random.randint(0, len(choices)-1)
    await message.reply(choices[num])
        
@addcmd("nuke", 2)
async def nuke(msg, message, self):
    await message.edit("woah! this command is dangerous. react :thumbsup: to confirm.")
    passed = await waitForReaction('üëç', bot_runner)
    if passed == False:
        await message.edit("command aborted")
        time.sleep(2)
        await message.delete()
        return ""
    await message.delete()
    channels = []
    try:
        channels.append(await message.guild.create_text_channel("ant was here"))
    except:
        await message.channel.send("failed")
        return ""
    i = 0
    while i < 20:
        i = i + 1
        channels.append(await message.guild.create_text_channel("ant was here"))
        time.sleep(.5)
    for channel in channels:
        await channel.send("@everyone")
        
@addcmd("dm", 2)
async def dm(msg, message, self):
    mention = message.mentions[0]
    msg.pop(0)
    msg = " ".join(msg)
    await message.delete()
    dm = await self.create_dm(mention)
    await dm.send(msg)
    
    
@addcmd("clone",2)
async def clone(msg, message, self):
    await message.edit("are you sure react :thumbsup: to confirm.?")
    consent = await waitForReaction('üëç', self.user)
    if consent == False:
       await message.delete()
       return ""
    try:
        clone = await message.channel.clone()
        await clone.edit(position=message.channel.position)
        await message.channel.send(f"<#{clone.id}>")
        time.sleep(2)
        await message.channel.delete()
    except:
        await message.channel.send("failed")

#######
class MyClient(discord.Client):
    async def on_message_edit(self, before, after):
        if before.author == self.user:
            return ""
        global watching
        if not before.channel in watching:
            return ""
        authorid = before.author.id
        before_content = before.content
        after_content = after.content
        await before.channel.send(f"<@{authorid}> edited a message!\nBefore: {before_content}\nAfter: {after_content}")
        
    async def on_message_delete(self, message):
        if message.author == self.user:
            return ""
        global watching
        if not message.channel in watching:
            return ""
        author = message.author
        content = message.content
        await message.channel.send(f"<@{author.id}> deleted: {content}")
        
        
     
    async def on_reaction_add(self, reaction, user):
        global cmdlists
        if reaction.message in cmdlists:
            if str(reaction.emoji) == '‚ñ∂Ô∏è':
                await cmdlists[reaction.message].next()
            elif str(reaction.emoji) == '‚óÄÔ∏è':
                await cmdlists[reaction.message].back()
            elif str(reaction.emoji) == '‚ùå':
                await cmdlists[reaction.message].delete()
                
    async def on_guild_remove(self, guild):
        print(f"User was kicked from/left guild: {guild.name}")
        
    async def on_ready(self):
        global loaded, bot_runner
        bot_runner = self.user
        loaded = True
        try:
            os.system('clear')
        except:
            os.system('cls')
        print(f"---[[[[ fully loaded, {bot_runner.display_name}. Made by ant<3 ]]]]---")

    async def on_message(self, message):
        global afk, afk_msg, prefix, loaded, others_allowed, whitelisted
        content = message.content
        if afk == True:
            if self.user in message.mentions:
                if message.author != self.user:
                    await message.reply(f"afk for {afk_msg}")
                    return ""
        if not content.startswith(prefix):
            return ""
        if self.user != message.author and others_allowed == False:
            return ""
        if others_allowed == True and self.user != message.author and not message.channel in whitelisted:
            return ""
        try:
            msg = content.split()
            cmd = list(msg[0])
            msg.pop(0)
            for i in list(prefix):
                cmd.pop(0)
            cmd = "".join(cmd)
            if cmd in cmds:
                if cmds[cmd]["level"] == 2 and self.user != message.author:
                    await message.reply("missing perms")
                    return ""
                await cmds[cmd]["func"](msg, message, self)
        except Exception as e:
            print(e)
            

client = MyClient()
client.run(token)